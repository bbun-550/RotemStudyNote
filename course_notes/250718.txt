250718

벤치마크, 소스코드 분석
	핵심적인 부분을 만들면 됨. 아이디어

django 명령어 시험 문제로 출제 예정(15장에서 내실 예정)

- `admin.site.register(POST)`
- `python manage.py runserver` : 프로젝트 실행

* 장고는 path, ORM
회원관리 > 게시판 만들 수 있으면 됨

django 설치하면 `django-admin` 사용할 수 있음
python manage.py 로 명령어 입력(단, manage.py 파일 있는 곳에서 실행)

setting.py 는 환경설정
	- 어플리케이션 추가시 수정해야될 곳

`admin.site.register(POST)`

request.POST 딕셔너리 형태
	model.py에 있는 거 기준
	- model.py에 적은 필드 = request.POST['html form에서 보내준 parameter name 값']
	- POST.object ; django에서 제공하는 ORM
	- create = insert 
{% csrf_token %} : 존재이유 보안상(어디에 놔야하는지)

render가 실제로 보여지는 부분 template, 보여질 객체
{% for post in posts %} - {% endfor %} ; template 안쪽은 언어 문법 씀

postman으로 테스트

Django ORM 사용법 
1. 객체 생성 Insert
2. 객체 조회 Select
3. 정렬
4. 수정
5. 


create 할 때는 구분 인자 필요(튜플로 들어감)

수정 update 할 때는 구분인자 있으면 안됨

get_object_or_404 ; 일치하는게 없을 때 404 error 출력
주소 완전히 바뀌는 것 : redirect
화면만 바꿔 주는 것 : render

form.py을 자동으로 만들어주는 역할
	사용할 때 {{form.as_p}}

---
파일 업로드 실습

1. 환경설정
	- 가상환경 ; 가상환경에 여러 플젝 진행 가능
	- `pip install django djangorestframework pillow` ; python -m ; 비교적 안정적. 이때 m은 module
	- djangorestframework : 장고에서 REST API 쉽게 만들 수 있게 도와줌 (더 알아보자)
	- pillow : 이미지 업로드 및 처리에 사용됨. jpg, png, gif 이미지 형식 열기 저장 리사이즈 회전 자르기 이미지편집 이미지검증...
2. settings.py 설정 ; 어플리케이션 추가 해주는 곳
	- rest_framework, upload 어플 추가
	- 밑에 MEDIA_URL = '/media/' 랑 MEDIA_ROOT = BASE_DIR / 'media' 추가
```
# 프로젝트 (uploadproj/urls.py) 최하단에 추가
from django.conf import settings
from django.conf.urls.static import static

urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
```
3. model 생성 - 파일 업로드
	- 업로드 클라스 생성 `class UploadedImage(models,Model):`
```
class UploadedImage(models.Model):
    image = models.ImageField(upload_to='uploads/')
    description = models.CharField(max_length=255)
    uploaded_at = models.DateTimeField(auto_now_add=True)
```
4. serializer : (직렬화)동시성 오류 방지. 
	- 복잡한 데이터구조(객체, 쿼리셋..)를 다른 시스템에서 사용/저장하기 쉬운 형태로 변환하는 역할
	- 데이터의 송수신/저장 효율성을 높이고 데이터 손실을 방지하는 중요한 역할
```
# upload/serializers.py

from rest_framework import serializers
from .models import UploadedImage

class UploadedImageSerializer(serializers.ModelSerializer):
    class Meta:
        model = UploadedImage
        fields = '__all__'
```
5. views : 업로드 기능 추가
6. path 추가
7. include
8. html 만들어준다

static 넣어주는 것 비추. render 'index.html' 추천

---
Heroku


---

### jQuery
- ajax Dom 조작을 간단하게 할 수 있음

- HTML 문서 특정 요소 쉽게 찾음
- HTML 콘텐츠 쉽게 변경
- 이벤트 쉽게 처리
- 페이지 상의 콘텐츠를 쉽게 애니메이트
- 네트워크를 통해 새로운 콘텐츠 가져올 수 있음

- jQuery 사용하면 웹 페이지 내용 스타일을 동적으로 바꿀 수 있음