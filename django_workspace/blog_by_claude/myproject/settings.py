"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

# pathlib 모듈에서 Path 클래스를 가져옵니다
# Path는 파일 시스템 경로를 객체 지향적으로 다룰 수 있게 해주는 클래스입니다
# Windows, Linux, Mac 등 운영체제에 관계없이 경로를 처리할 수 있습니다
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR: Django 프로젝트의 최상위 디렉토리 경로를 저장하는 변수
# __file__: 현재 실행 중인 파일(settings.py)의 절대 경로
# .resolve(): 심볼릭 링크를 해결하고 절대 경로로 변환
# .parent.parent: settings.py → myproject 폴더 → 프로젝트 최상위 폴더로 2단계 상위 이동
# 예: C:\Users\rlarb\Downloads\새 폴더 (2)\
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY: Django의 암호화 작업에 사용되는 비밀 키
# 용도: 세션 데이터 암호화, CSRF 토큰 생성, 쿠키 서명 등
# 주의사항: 
#   - 절대 공개하면 안됨 (GitHub 등에 업로드 시 주의)
#   - 배포시에는 환경 변수나 별도 파일로 관리 권장
#   - 이 키가 노출되면 전체 보안이 위험해짐
SECRET_KEY = 'django-insecure-mysz6ak2z^djlb_t&b3aeq24s)hw0bg2nzzc7dl4qv(+esere^'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG: 개발 모드 활성화 여부
# True일 때:
#   - 에러 발생시 상세한 에러 페이지 표시
#   - 코드 변경시 자동 재시작
#   - 개발 편의 기능들 활성화
# False일 때 (배포시):
#   - 에러 발생시 간단한 에러 페이지만 표시
#   - 보안상 민감한 정보 숨김
#   - 성능 최적화
DEBUG = True

# ALLOWED_HOSTS: 이 Django 사이트에 접근할 수 있는 호스트/도메인 이름들을 지정
# 빈 리스트일 때: DEBUG=True인 경우에만 localhost, 127.0.0.1에서 접근 가능
# 배포시 예시: ['mysite.com', 'www.mysite.com', '192.168.1.100']
# '*'로 설정하면 모든 호스트 허용 (보안상 위험하므로 배포시 권장하지 않음)
ALLOWED_HOSTS = []


# Application definition
# INSTALLED_APPS: Django 프로젝트에서 사용할 앱들을 등록하는 리스트
# Django는 이 리스트의 순서대로 앱들을 로드합니다
INSTALLED_APPS = [
    # Django 기본 제공 앱들 (Built-in Apps)
    'django.contrib.admin',        # 관리자 페이지 (/admin/)
    'django.contrib.auth',         # 사용자 인증 시스템 (로그인/로그아웃/회원가입)
    'django.contrib.contenttypes', # Django의 콘텐츠 타입 프레임워크
    'django.contrib.sessions',     # 세션 프레임워크 (로그인 상태 유지)
    'django.contrib.messages',     # 일회성 메시지 프레임워크 (성공/에러 메시지)
    'django.contrib.staticfiles',  # 정적 파일 관리 (CSS, JavaScript, 이미지)
    
    # 커스텀 앱들 (우리가 만든 앱들)
    'blog',  # blog 앱 등록 (blog/apps.py의 BlogConfig 참조)
]

# MIDDLEWARE: HTTP 요청과 응답을 처리하는 미들웨어들의 순서를 정의
# 요청시: 위에서 아래 순서로 실행
# 응답시: 아래에서 위 순서로 실행
MIDDLEWARE = [
    # 보안 관련 HTTP 헤더들을 자동으로 설정하는 미들웨어
    'django.middleware.security.SecurityMiddleware',
    
    # 세션 데이터를 처리하는 미들웨어 (로그인 상태 유지 등)
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    # 일반적인 웹 사이트 기능들을 제공하는 미들웨어
    # - URL 끝에 슬래시 자동 추가/제거
    # - User-Agent 금지 목록 확인
    'django.middleware.common.CommonMiddleware',
    
    # CSRF(Cross-Site Request Forgery) 공격을 방지하는 미들웨어
    # 모든 POST 요청에 CSRF 토큰을 요구함
    'django.middleware.csrf.CsrfViewMiddleware',
    
    # 사용자 인증을 처리하는 미들웨어
    # request.user 객체를 각 요청에 추가
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    
    # 일회성 메시지를 처리하는 미들웨어
    # "게시글이 저장되었습니다" 같은 알림 메시지 처리
    'django.contrib.messages.middleware.MessageMiddleware',
    
    # 클릭재킹(Clickjacking) 공격을 방지하는 미들웨어
    # X-Frame-Options 헤더를 설정하여 iframe 삽입 방지
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ROOT_URLCONF: 최상위 URL 설정 파일을 지정
# 'myproject.urls': myproject/urls.py 파일을 의미
# Django는 URL 요청이 들어오면 이 파일부터 URL 매칭을 시작
ROOT_URLCONF = 'myproject.urls'

# TEMPLATES: HTML 템플릿 엔진 설정
TEMPLATES = [
    {
        # BACKEND: 사용할 템플릿 엔진 지정
        # Django의 기본 템플릿 엔진(DTL - Django Template Language) 사용
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        
        # DIRS: 템플릿 파일을 찾을 디렉토리들을 지정
        # [BASE_DIR / 'templates']: 프로젝트 루트의 templates 폴더
        # 예: C:\Users\rlarb\Downloads\새 폴더 (2)\templates\
        'DIRS': [BASE_DIR / 'templates'],
        
        # APP_DIRS: 각 앱의 templates 폴더에서도 템플릿을 찾을지 여부
        # True: blog/templates/, auth/templates/ 등에서도 템플릿 검색
        'APP_DIRS': True,
        
        # OPTIONS: 템플릿 엔진의 추가 옵션들
        'OPTIONS': {
            # context_processors: 모든 템플릿에서 기본적으로 사용할 수 있는 변수들을 제공
            'context_processors': [
                # request 객체를 템플릿에서 사용 가능하게 함
                'django.template.context_processors.request',
                # user, perms 객체를 템플릿에서 사용 가능하게 함
                'django.contrib.auth.context_processors.auth',
                # messages를 템플릿에서 사용 가능하게 함
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI_APPLICATION: WSGI 애플리케이션을 지정
# WSGI: Web Server Gateway Interface (웹 서버와 Python 웹 애플리케이션 간의 표준 인터페이스)
# 배포시 Apache, Nginx 등의 웹 서버와 연결하는데 사용
WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES: 데이터베이스 연결 설정
DATABASES = {
    # 'default': 기본 데이터베이스 설정 (Django는 최소 1개의 데이터베이스 필요)
    'default': {
        # ENGINE: 사용할 데이터베이스 엔진
        # SQLite: 파일 기반의 경량 데이터베이스 (개발용으로 적합)
        # 다른 옵션들: PostgreSQL, MySQL, Oracle 등
        'ENGINE': 'django.db.backends.sqlite3',
        
        # NAME: 데이터베이스 파일의 경로 (SQLite의 경우)
        # BASE_DIR / 'db.sqlite3': 프로젝트 루트에 db.sqlite3 파일 생성
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS: 비밀번호 유효성 검사 규칙들
# 사용자가 회원가입하거나 비밀번호를 변경할 때 적용되는 규칙들
AUTH_PASSWORD_VALIDATORS = [
    {
        # 사용자의 개인정보(이름, 이메일 등)와 너무 유사한 비밀번호 방지
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        # 최소 길이 요구사항 (기본: 8자 이상)
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        # 흔히 사용되는 비밀번호 방지 (예: password123, qwerty 등)
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        # 숫자로만 구성된 비밀번호 방지
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

# LANGUAGE_CODE: 웹사이트의 기본 언어 설정
# 'en-us': 미국 영어
# 한국어 사용시: 'ko-kr'
# Django 관리자 페이지, 에러 메시지 등의 언어에 영향
LANGUAGE_CODE = 'en-us'

# TIME_ZONE: 서버의 기본 시간대 설정
# 'UTC': 협정 세계시 (Greenwich Mean Time)
# 한국 시간 사용시: 'Asia/Seoul'
# 데이터베이스에 저장되는 시간과 화면에 표시되는 시간에 영향
TIME_ZONE = 'UTC'

# USE_I18N: 국제화(Internationalization) 기능 활성화 여부
# True: 다국어 지원 기능 활성화
# False: 다국어 기능 비활성화 (성능 향상)
USE_I18N = True

# USE_TZ: 시간대 인식 기능 활성화 여부
# True: 시간대를 고려한 datetime 객체 사용
# False: naive datetime 객체 사용
# True 권장 (다양한 시간대의 사용자 대응)
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# STATIC_URL: 정적 파일에 접근할 때 사용할 URL 접두사
# '/static/': http://도메인/static/css/style.css 형태로 접근
# 실제 파일 경로와는 다름 (URL과 파일 시스템 경로를 분리)
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD: 모델에서 기본 키를 자동 생성할 때 사용할 필드 타입
# 'django.db.models.BigAutoField': 64비트 자동 증가 정수 필드
# apps.py에서 개별 앱별로 설정 가능하며, 여기서는 전체 프로젝트 기본값 설정
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Login/Logout redirect URLs
# 사용자 인증 관련 리다이렉트 URL 설정

# LOGIN_REDIRECT_URL: 로그인 성공 후 이동할 URL
# '/': 홈페이지로 이동
# 별도 설정하지 않으면 Django 기본값인 '/accounts/profile/' 사용
LOGIN_REDIRECT_URL = '/'

# LOGOUT_REDIRECT_URL: 로그아웃 후 이동할 URL  
# '/': 홈페이지로 이동
# 별도 설정하지 않으면 로그아웃 완료 페이지 표시
LOGOUT_REDIRECT_URL = '/'

# settings.py 파일의 중요성:
# 1. Django 프로젝트의 모든 설정을 중앙에서 관리
# 2. 보안, 데이터베이스, 템플릿, 정적 파일 등 핵심 구성 요소 설정
# 3. 개발 환경과 배포 환경을 구분하여 관리 가능
# 4. 환경 변수를 통한 민감한 정보 관리 가능

# 배포시 주의사항:
# - DEBUG = False로 설정
# - SECRET_KEY를 환경 변수로 분리
# - ALLOWED_HOSTS에 실제 도메인 추가
# - 데이터베이스를 PostgreSQL 등으로 변경
# - 정적 파일 서빙 설정 추가